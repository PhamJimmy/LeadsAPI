'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withContext = exports.getContext = exports.PropTypes = exports.setPropTypes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _recompose = require('recompose');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// export depending on env
let setPropTypes;
let PropTypes;
let getContext;
let withContext;

const loop = (object, callback) => {
    for (let i in object) {
        object.hasOwnProperty(i) && callback(i, object[i]);
    }
};

const mapArgs = args => {
    if (typeof args !== 'object') {
        return args;
    }

    let mappedArgs = args.length !== undefined ? [] : {};

    loop(args, (key, arg) => {
        if (arg && arg.ptc) {
            if (_propTypes2.default[arg.type]) {
                let realArg;

                if (arg.args) {
                    realArg = _propTypes2.default[arg.type](...mapArgs(arg.args));
                } else {
                    realArg = _propTypes2.default[arg.type];
                }

                if (arg.required) {
                    realArg = realArg.isRequired;
                }

                mappedArgs[key] = realArg;
            } else {
                throw new Error(`Unknown propType ${arg.type}`);
            }
        } else {
            mappedArgs[key] = typeof arg !== 'object' ? arg : mapArgs(arg);
        }
    });

    return mappedArgs;
};

if (process.env.NODE_ENV === 'production' && process.env.PROPER_TYPES !== 'show') {
    exports.setPropTypes = setPropTypes = _recompose.setPropTypes;
    exports.PropTypes = PropTypes = _propTypes2.default;
    exports.getContext = getContext = _recompose.getContext;
    exports.withContext = withContext = _recompose.withContext;
} else {
    exports.setPropTypes = setPropTypes = properProps => Component => {
        let propTypes = {};
        let properTypes = {};

        loop(properProps, (key, prop) => {
            let propType = {};

            if (!prop || !prop.ptc) {
                propTypes[key] = prop;
                properTypes[key] = prop === null ? 'null' : typeof prop;
            } else if (_propTypes2.default[prop.type]) {
                if (prop.args) {
                    propType = _propTypes2.default[prop.type](...mapArgs(prop.args));
                } else {
                    propType = _propTypes2.default[prop.type];
                }

                if (prop.required) {
                    propType = propType.isRequired;
                }

                propTypes[key] = propType;
                properTypes[key] = _extends({}, prop);
            } else {
                throw new Error(`Unknown propType ${prop.type}`);
            }
        });

        Component.propTypes = _extends({}, Component.propTypes, propTypes);
        Component.properTypes = _extends({}, Component.properTypes, properTypes);

        return Component;
    };

    const buildType = type => {
        let reply = { type, ptc: true };
        return _extends({}, reply, { isRequired: _extends({}, reply, { required: true }) });
    };

    const buildArgType = type => {
        return (...args) => {
            let reply = { type, args, ptc: true };
            return _extends({}, reply, { isRequired: _extends({}, reply, { required: true }) });
        };
    };

    exports.getContext = getContext = (...context) => (0, _recompose.getContext)(...mapArgs(context));
    exports.withContext = withContext = (...context) => (0, _recompose.withContext)(...mapArgs(context));

    // propTypes <-> properTypes mapping
    exports.PropTypes = PropTypes = {
        // simple types
        any: buildType('any'),
        array: buildType('array'),
        bool: buildType('bool'),
        func: buildType('func'),
        number: buildType('number'),
        object: buildType('object'),
        string: buildType('string'),
        symbol: buildType('symbol'),
        node: buildType('node'),
        element: buildType('element'),
        // types that take args
        instanceOf: buildArgType('instanceOf'),
        oneOf: buildArgType('oneOf'),
        oneOfType: buildArgType('oneOfType'),
        arrayOf: buildArgType('arrayOf'),
        objectOf: buildArgType('objectOf'),
        shape: buildArgType('shape')
    };
}

exports.setPropTypes = setPropTypes;
exports.PropTypes = PropTypes;
exports.getContext = getContext;
exports.withContext = withContext;